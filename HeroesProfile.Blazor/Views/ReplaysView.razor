@page "/"
@inherits ReactiveInjectableComponentBase<ReplaysViewModel>

@if (ViewModel.StoredReplays != null)
{
    <Row>
        <Column>
            <DataGrid TItem=ReplaysViewModel.GridItem
                  Data=@ViewModel.StoredReplays
                  Filterable=true
                  PageSize=20
                  ShowPager=true
                  Virtualize=false
                  Responsive=true
                  Editable=false
                  Narrow=true
                  FilterMethod=DataGridFilterMethod.Contains>

                @*<DataGridCommandColumn TItem="ReplaysViewModel.GridItem" />*@
                <DataGridColumn TItem="ReplaysViewModel.GridItem" Field="@nameof(ReplaysViewModel.GridItem.Path)" Caption="Path" />

                @*
                    - We do not care about Created Column - its part of the Replay File Name
                    - We do not care about the Finger print - users wont gain any value from it
                    <DataGridColumn TItem="ReplaysViewModel.GridItem" Field="@nameof(ReplaysViewModel.GridItem.Created)" Caption="Created" />
                    <DataGridColumn TItem="ReplaysViewModel.GridItem" Field="@nameof(ReplaysViewModel.GridItem.Fingerprint)" Caption="Fingerprint" />
                *@

                <DataGridColumn TItem="ReplaysViewModel.GridItem" Field="@nameof(ReplaysViewModel.GridItem.Updated)" Caption="Updated" />

                @*

                    No value because the Final Process Status will tell the user if it was successful
                    Maybe these columns can be useful in Debug/Developer mode

                    <DataGridColumn Filterable=false TItem="ReplaysViewModel.GridItem" Field="@nameof(ReplaysViewModel.GridItem.ParseResult)" Caption="Parse">
                    <DisplayTemplate>
                    <Badge Color=context.ParseResultColor>@context.ParseResult</Badge>
                    </DisplayTemplate>
                    </DataGridColumn>

                    No value because the Final Process Status will tell the user if it was successful

                    <DataGridColumn Filterable=false TItem="ReplaysViewModel.GridItem" Field="@nameof(ReplaysViewModel.GridItem.UploadStatus)" Caption="Upload">
                    <DisplayTemplate>
                    <Badge Color=context.UploadStatusColor>@context.UploadStatus</Badge>
                    </DisplayTemplate>
                    </DataGridColumn>
                *@


                <DataGridColumn Filterable=false TItem="ReplaysViewModel.GridItem" Field="@nameof(ReplaysViewModel.GridItem.ProcessStatus)" Caption="Status">
                    <DisplayTemplate>
                        <Badge Color=context.ProcessStatusColor>@context.ProcessStatus</Badge>
                    </DisplayTemplate>
                </DataGridColumn>
                <DataGridColumn Filterable=false TItem="ReplaysViewModel.GridItem" Field="@nameof(ReplaysViewModel.GridItem.Exists)" Caption="Launch">
                    <DisplayTemplate>
                        @if (!context.Exists)
                    {
                        <Badge Color=Color.Warning>No Local file</Badge>
                    }
                    else
                    {
                        <Button Size=Size.Small Color=Color.Primary @onclick="@context.LaunchReplay">Launch Replay</Button>
                    }
                    </DisplayTemplate>
                </DataGridColumn>
                <DataGridColumn Filterable=false TItem="ReplaysViewModel.GridItem" Field="@nameof(ReplaysViewModel.GridItem.WebLink)" Caption="Web Link">
                    <DisplayTemplate>
                        @if (context.WebLink != null && context.UploadStatus == UploadStatus.Success)
                    {
                        <Button Size=Size.Small Color=Color.Primary @onclick="@context.OpenInBrowser">Open in Browser</Button>
                    }
                    else
                    {
                        <Badge Color=Color.Info>No ReplayID</Badge>
                    }
                    </DisplayTemplate>
                </DataGridColumn>
            </DataGrid>
        </Column>
    </Row>
}

@code {

protected async override Task OnInitializedAsync() => await ViewModel.LoadAsync(CancellationToken.None);

}